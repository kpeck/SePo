/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DateTime, DateTimeInterface } from "../DateTime";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getDay",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "month",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "year",
        type: "uint16",
      },
    ],
    name: "getDaysInMonth",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getHour",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getMinute",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getMonth",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getSecond",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getWeekday",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getYear",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "year",
        type: "uint16",
      },
    ],
    name: "isLeapYear",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "year",
        type: "uint256",
      },
    ],
    name: "leapYearsBefore",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "year",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "month",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "day",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "hour",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "minute",
        type: "uint8",
      },
    ],
    name: "toTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "year",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "month",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "day",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "hour",
        type: "uint8",
      },
    ],
    name: "toTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "year",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "month",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "day",
        type: "uint8",
      },
    ],
    name: "toTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "year",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "month",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "day",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "hour",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "minute",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "second",
        type: "uint8",
      },
    ],
    name: "toTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ca2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639054bdec1161008c578063a6f0e57711610066578063a6f0e577146101e5578063b199993714610208578063b238ad0e1461021b578063fa93f8831461022e57600080fd5b80639054bdec1461019957806392d66313146101ac578063a324ad24146101d257600080fd5b806365c72840116100c857806365c728401461014d5780637f791833146101605780638aa001fc146101735780638c8d98a01461018657600080fd5b80633e239e1a146100ef5780634ac1ad781461011957806362ba96871461012c575b600080fd5b6101026100fd36600461092e565b610241565b60405160ff90911681526020015b60405180910390f35b61010261012736600461092e565b61026b565b61013f61013a36600461096f565b610287565b604051908152602001610110565b61010261015b36600461092e565b6102a2565b61013f61016e3660046109d4565b6102b7565b61010261018136600461092e565b6102d1565b61013f610194366004610a28565b6102de565b61013f6101a7366004610a6b565b6102f8565b6101bf6101ba36600461092e565b6104a9565b60405161ffff9091168152602001610110565b6101026101e036600461092e565b610599565b6101f86101f3366004610adf565b6105ae565b6040519015158152602001610110565b61013f61021636600461092e565b61060d565b610102610229366004610b01565b610652565b61010261023c36600461092e565b610719565b60006018603c6102518185610b60565b61025b9190610b60565b6102659190610b74565b92915050565b6000600761027c6201518084610b60565b61025b906004610b88565b6000610298868686868660006102f8565b9695505050505050565b60006102ad82610727565b6040015192915050565b60006102c8858585856000806102f8565b95945050505050565b6000610265603c83610b74565b60006102f084848460008060006102f8565b949350505050565b60006107b25b8761ffff168161ffff16101561035457610317816105ae565b156103315761032a6301e2850083610b88565b9150610342565b61033f6301e1338083610b88565b91505b8061034c81610ba0565b9150506102fe565b61035c61090f565b601f8152610369896105ae565b1561037a57601d6020820152610382565b601c60208201525b601f60408201819052601e606083018190526080830182905260a0830181905260c0830182905260e0830182905261010083018190526101208301829052610140830152610160820152600191505b8760ff168261ffff16101561043357806103ec600184610bd8565b61ffff16600c811061040057610400610bc2565b60200201516104159060ff1662015180610bfb565b61041f9084610b88565b92508161042b81610ba0565b9250506103d1565b61043e600188610c1a565b61044e9060ff1662015180610bfb565b6104589084610b88565b925061046960ff8716610e10610bfb565b6104739084610b88565b925061048360ff8616603c610bfb565b61048d9084610b88565b925061049c60ff851684610b88565b9998505050505050505050565b60008080806104bc6301e1338086610b60565b6104c8906107b2610b88565b91506104d56107b261060d565b6104e28361ffff1661060d565b6104ec9190610c3d565b90506104fc816301e28500610bfb565b6105069084610b88565b9250806105156107b284610bd8565b61ffff166105239190610c3d565b610531906301e13380610bfb565b61053b9084610b88565b92505b84831115610591576105546101f3600184610bd8565b1561056e576105676301e2850084610c3d565b925061057f565b61057c6301e1338084610c3d565b92505b61058a600183610bd8565b915061053e565b509392505050565b60006105a482610727565b6020015192915050565b60006105bb600483610c54565b61ffff16156105cc57506000919050565b6105d7606483610c54565b61ffff16156105e857506001919050565b6105f461019083610c54565b61ffff161561060557506000919050565b506001919050565b600061061a600183610c3d565b915061062861019083610b60565b610633606484610b60565b61063e600485610b60565b6106489190610c3d565b6102659190610b88565b60008260ff166001148061066957508260ff166003145b8061067757508260ff166005145b8061068557508260ff166007145b8061069357508260ff166008145b806106a157508260ff16600a145b806106af57508260ff16600c145b156106bc5750601f610265565b8260ff16600414806106d157508260ff166006145b806106df57508260ff166009145b806106ed57508260ff16600b145b156106fa5750601e610265565b610703826105ae565b156107105750601d610265565b50601c92915050565b6000603c61025b8184610b60565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905290808061076b856104a9565b61ffff16845261077c6107b261060d565b845161078b9061ffff1661060d565b6107959190610c3d565b91506107a5826301e28500610bfb565b6107af9084610b88565b9250816107b285600001516107c49190610bd8565b61ffff166107d29190610c3d565b6107e0906301e13380610bfb565b6107ea9084610b88565b92506000600191505b600c8260ff161161085b5761080c828660000151610652565b61081c9060ff1662015180610bfb565b9050856108298583610b88565b111561083d5760ff8216602086015261085b565b6108478185610b88565b93508161085381610c75565b9250506107f3565b600191505b61087285602001518660000151610652565b60ff168260ff16116108c1578561088c8562015180610b88565b11156108a05760ff821660408601526108c1565b6108ad6201518085610b88565b9350816108b981610c75565b925050610860565b6108ca86610241565b60ff1660608601526108db86610719565b60ff1660808601526108ec866102d1565b60ff1660a08601526108fd8661026b565b60ff1660c08601525092949350505050565b604051806101800160405280600c906020820280368337509192915050565b60006020828403121561094057600080fd5b5035919050565b803561ffff8116811461095957600080fd5b919050565b803560ff8116811461095957600080fd5b600080600080600060a0868803121561098757600080fd5b61099086610947565b945061099e6020870161095e565b93506109ac6040870161095e565b92506109ba6060870161095e565b91506109c86080870161095e565b90509295509295909350565b600080600080608085870312156109ea57600080fd5b6109f385610947565b9350610a016020860161095e565b9250610a0f6040860161095e565b9150610a1d6060860161095e565b905092959194509250565b600080600060608486031215610a3d57600080fd5b610a4684610947565b9250610a546020850161095e565b9150610a626040850161095e565b90509250925092565b60008060008060008060c08789031215610a8457600080fd5b610a8d87610947565b9550610a9b6020880161095e565b9450610aa96040880161095e565b9350610ab76060880161095e565b9250610ac56080880161095e565b9150610ad360a0880161095e565b90509295509295509295565b600060208284031215610af157600080fd5b610afa82610947565b9392505050565b60008060408385031215610b1457600080fd5b610b1d8361095e565b9150610b2b60208401610947565b90509250929050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082610b6f57610b6f610b34565b500490565b600082610b8357610b83610b34565b500690565b60008219821115610b9b57610b9b610b4a565b500190565b600061ffff80831681811415610bb857610bb8610b4a565b6001019392505050565b634e487b7160e01b600052603260045260246000fd5b600061ffff83811690831681811015610bf357610bf3610b4a565b039392505050565b6000816000190483118215151615610c1557610c15610b4a565b500290565b600060ff821660ff841680821015610c3457610c34610b4a565b90039392505050565b600082821015610c4f57610c4f610b4a565b500390565b600061ffff80841680610c6957610c69610b34565b92169190910692915050565b600060ff821660ff811415610c8c57610c8c610b4a565b6001019291505056fea164736f6c634300080a000a";

export class DateTime__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DateTime> {
    return super.deploy(overrides || {}) as Promise<DateTime>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DateTime {
    return super.attach(address) as DateTime;
  }
  connect(signer: Signer): DateTime__factory {
    return super.connect(signer) as DateTime__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DateTimeInterface {
    return new utils.Interface(_abi) as DateTimeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DateTime {
    return new Contract(address, _abi, signerOrProvider) as DateTime;
  }
}
