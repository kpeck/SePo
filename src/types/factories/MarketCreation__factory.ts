/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MarketCreation,
  MarketCreationInterface,
} from "../MarketCreation";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50601680601d6000396000f3fe6080604052600080fdfea164736f6c6343000706000a";

export class MarketCreation__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MarketCreation> {
    return super.deploy(overrides || {}) as Promise<MarketCreation>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MarketCreation {
    return super.attach(address) as MarketCreation;
  }
  connect(signer: Signer): MarketCreation__factory {
    return super.connect(signer) as MarketCreation__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketCreationInterface {
    return new utils.Interface(_abi) as MarketCreationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarketCreation {
    return new Contract(address, _abi, signerOrProvider) as MarketCreation;
  }
}
