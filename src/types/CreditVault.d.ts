/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CreditVaultInterface extends ethers.utils.Interface {
  functions: {
    "aaveLendingPool()": FunctionFragment;
    "approveOnCreditDelegation(uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getDay(uint256)": FunctionFragment;
    "getDaysInMonth(uint8,uint16)": FunctionFragment;
    "getHour(uint256)": FunctionFragment;
    "getMinute(uint256)": FunctionFragment;
    "getMonth(uint256)": FunctionFragment;
    "getPositionAmount(uint256)": FunctionFragment;
    "getPositionCreditor(uint256)": FunctionFragment;
    "getSecond(uint256)": FunctionFragment;
    "getWeekday(uint256)": FunctionFragment;
    "getYear(uint256)": FunctionFragment;
    "isLeapYear(uint16)": FunctionFragment;
    "leapYearsBefore(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "returnCollateral(uint256,uint256)": FunctionFragment;
    "saveData(address,address,address,uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setDebitVault(address)": FunctionFragment;
    "takeCollateral(uint256)": FunctionFragment;
    "toTimestamp(uint16,uint8,uint8,uint8,uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aaveLendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveOnCreditDelegation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDaysInMonth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHour",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMonth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionCreditor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeekday",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeapYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leapYearsBefore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "saveData",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebitVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "takeCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toTimestamp",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "aaveLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveOnCreditDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDaysInMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHour", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMinute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMonth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionCreditor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSecond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWeekday", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLeapYear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leapYearsBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saveData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDebitVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "newPosition(uint256,address,address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "positionTakeCollateral(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "positionTakeCollateral"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type newPositionEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    counter: BigNumber;
    debitor: string;
    creditor: string;
    token: string;
    collateral: string;
    amount: BigNumber;
    amountCollateral: BigNumber;
    month: BigNumber;
    year: BigNumber;
  }
>;

export type positionTakeCollateralEvent = TypedEvent<
  [BigNumber, string, string] & {
    counter: BigNumber;
    debitor: string;
    creditor: string;
  }
>;

export class CreditVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CreditVaultInterface;

  functions: {
    aaveLendingPool(overrides?: CallOverrides): Promise<[string]>;

    approveOnCreditDelegation(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDay(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getHour(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMinute(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPositionAmount(
      _counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPositionCreditor(
      _counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSecond(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getWeekday(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isLeapYear(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnCollateral(
      _amount: BigNumberish,
      _counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saveData(
      _debitor: string,
      _creditor: string,
      _token: string,
      _amount: BigNumberish,
      _collateral: string,
      _amountCollateral: BigNumberish,
      _month: BigNumberish,
      _year: BigNumberish,
      _interest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebitVault(
      _debitVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeCollateral(
      _counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  aaveLendingPool(overrides?: CallOverrides): Promise<string>;

  approveOnCreditDelegation(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDay(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getDaysInMonth(
    month: BigNumberish,
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getHour(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getMinute(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getMonth(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getPositionAmount(
    _counter: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionCreditor(
    _counter: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSecond(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getWeekday(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getYear(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  isLeapYear(year: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  leapYearsBefore(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnCollateral(
    _amount: BigNumberish,
    _counter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saveData(
    _debitor: string,
    _creditor: string,
    _token: string,
    _amount: BigNumberish,
    _collateral: string,
    _amountCollateral: BigNumberish,
    _month: BigNumberish,
    _year: BigNumberish,
    _interest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebitVault(
    _debitVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeCollateral(
    _counter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    hour: BigNumberish,
    minute: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toTimestamp(uint16,uint8,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    hour: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toTimestamp(uint16,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    hour: BigNumberish,
    minute: BigNumberish,
    second: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aaveLendingPool(overrides?: CallOverrides): Promise<string>;

    approveOnCreditDelegation(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDay(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getHour(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getMinute(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getPositionAmount(
      _counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionCreditor(
      _counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSecond(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getWeekday(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    isLeapYear(year: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    returnCollateral(
      _amount: BigNumberish,
      _counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    saveData(
      _debitor: string,
      _creditor: string,
      _token: string,
      _amount: BigNumberish,
      _collateral: string,
      _amountCollateral: BigNumberish,
      _month: BigNumberish,
      _year: BigNumberish,
      _interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebitVault(
      _debitVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    takeCollateral(
      _counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "newPosition(uint256,address,address,address,address,uint256,uint256,uint256,uint256)"(
      counter?: null,
      debitor?: null,
      creditor?: null,
      token?: null,
      collateral?: null,
      amount?: null,
      amountCollateral?: null,
      month?: null,
      year?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        counter: BigNumber;
        debitor: string;
        creditor: string;
        token: string;
        collateral: string;
        amount: BigNumber;
        amountCollateral: BigNumber;
        month: BigNumber;
        year: BigNumber;
      }
    >;

    newPosition(
      counter?: null,
      debitor?: null,
      creditor?: null,
      token?: null,
      collateral?: null,
      amount?: null,
      amountCollateral?: null,
      month?: null,
      year?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        counter: BigNumber;
        debitor: string;
        creditor: string;
        token: string;
        collateral: string;
        amount: BigNumber;
        amountCollateral: BigNumber;
        month: BigNumber;
        year: BigNumber;
      }
    >;

    "positionTakeCollateral(uint256,address,address)"(
      counter?: null,
      debitor?: null,
      creditor?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { counter: BigNumber; debitor: string; creditor: string }
    >;

    positionTakeCollateral(
      counter?: null,
      debitor?: null,
      creditor?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { counter: BigNumber; debitor: string; creditor: string }
    >;
  };

  estimateGas: {
    aaveLendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    approveOnCreditDelegation(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDay(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHour(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinute(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionAmount(
      _counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionCreditor(
      _counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecond(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeekday(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLeapYear(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnCollateral(
      _amount: BigNumberish,
      _counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saveData(
      _debitor: string,
      _creditor: string,
      _token: string,
      _amount: BigNumberish,
      _collateral: string,
      _amountCollateral: BigNumberish,
      _month: BigNumberish,
      _year: BigNumberish,
      _interest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebitVault(
      _debitVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeCollateral(
      _counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aaveLendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveOnCreditDelegation(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDay(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHour(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinute(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionAmount(
      _counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionCreditor(
      _counter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecond(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeekday(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLeapYear(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnCollateral(
      _amount: BigNumberish,
      _counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saveData(
      _debitor: string,
      _creditor: string,
      _token: string,
      _amount: BigNumberish,
      _collateral: string,
      _amountCollateral: BigNumberish,
      _month: BigNumberish,
      _year: BigNumberish,
      _interest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebitVault(
      _debitVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeCollateral(
      _counter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
